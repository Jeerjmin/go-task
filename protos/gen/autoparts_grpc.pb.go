// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: autoparts.proto

package autoparts_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Autoparts_GetWarehouses_FullMethodName = "/autoparts.Autoparts/GetWarehouses"
	Autoparts_GetComponents_FullMethodName = "/autoparts.Autoparts/GetComponents"
)

// AutopartsClient is the client API for Autoparts service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AutopartsClient interface {
	GetWarehouses(ctx context.Context, in *GetWarehousesRequest, opts ...grpc.CallOption) (*GetWarehousesResponse, error)
	GetComponents(ctx context.Context, in *GetComponentsRequest, opts ...grpc.CallOption) (*GetComponentsResponse, error)
}

type autopartsClient struct {
	cc grpc.ClientConnInterface
}

func NewAutopartsClient(cc grpc.ClientConnInterface) AutopartsClient {
	return &autopartsClient{cc}
}

func (c *autopartsClient) GetWarehouses(ctx context.Context, in *GetWarehousesRequest, opts ...grpc.CallOption) (*GetWarehousesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWarehousesResponse)
	err := c.cc.Invoke(ctx, Autoparts_GetWarehouses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *autopartsClient) GetComponents(ctx context.Context, in *GetComponentsRequest, opts ...grpc.CallOption) (*GetComponentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetComponentsResponse)
	err := c.cc.Invoke(ctx, Autoparts_GetComponents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AutopartsServer is the server API for Autoparts service.
// All implementations must embed UnimplementedAutopartsServer
// for forward compatibility.
type AutopartsServer interface {
	GetWarehouses(context.Context, *GetWarehousesRequest) (*GetWarehousesResponse, error)
	GetComponents(context.Context, *GetComponentsRequest) (*GetComponentsResponse, error)
	mustEmbedUnimplementedAutopartsServer()
}

// UnimplementedAutopartsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAutopartsServer struct{}

func (UnimplementedAutopartsServer) GetWarehouses(context.Context, *GetWarehousesRequest) (*GetWarehousesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWarehouses not implemented")
}
func (UnimplementedAutopartsServer) GetComponents(context.Context, *GetComponentsRequest) (*GetComponentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComponents not implemented")
}
func (UnimplementedAutopartsServer) mustEmbedUnimplementedAutopartsServer() {}
func (UnimplementedAutopartsServer) testEmbeddedByValue()                   {}

// UnsafeAutopartsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AutopartsServer will
// result in compilation errors.
type UnsafeAutopartsServer interface {
	mustEmbedUnimplementedAutopartsServer()
}

func RegisterAutopartsServer(s grpc.ServiceRegistrar, srv AutopartsServer) {
	// If the following call pancis, it indicates UnimplementedAutopartsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Autoparts_ServiceDesc, srv)
}

func _Autoparts_GetWarehouses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWarehousesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutopartsServer).GetWarehouses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autoparts_GetWarehouses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutopartsServer).GetWarehouses(ctx, req.(*GetWarehousesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Autoparts_GetComponents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetComponentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutopartsServer).GetComponents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autoparts_GetComponents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutopartsServer).GetComponents(ctx, req.(*GetComponentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Autoparts_ServiceDesc is the grpc.ServiceDesc for Autoparts service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Autoparts_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "autoparts.Autoparts",
	HandlerType: (*AutopartsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWarehouses",
			Handler:    _Autoparts_GetWarehouses_Handler,
		},
		{
			MethodName: "GetComponents",
			Handler:    _Autoparts_GetComponents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "autoparts.proto",
}
